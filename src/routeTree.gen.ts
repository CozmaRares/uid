/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from "@tanstack/react-router";

// Import Routes

import { Route as rootRoute } from "./routes/__root";

// Create Virtual Routes

const IssuesLazyImport = createFileRoute("/issues")();
const IndexLazyImport = createFileRoute("/")();
const VoteIndexLazyImport = createFileRoute("/vote/")();
const VoteAllLazyImport = createFileRoute("/vote/all")();
const VoteVoteIDLazyImport = createFileRoute("/vote/$voteID")();

// Create/Update Routes

const IssuesLazyRoute = IssuesLazyImport.update({
  id: "/issues",
  path: "/issues",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/issues.lazy").then(d => d.Route));

const IndexLazyRoute = IndexLazyImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/index.lazy").then(d => d.Route));

const VoteIndexLazyRoute = VoteIndexLazyImport.update({
  id: "/vote/",
  path: "/vote/",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/vote/index.lazy").then(d => d.Route));

const VoteAllLazyRoute = VoteAllLazyImport.update({
  id: "/vote/all",
  path: "/vote/all",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/vote/all.lazy").then(d => d.Route));

const VoteVoteIDLazyRoute = VoteVoteIDLazyImport.update({
  id: "/vote/$voteID",
  path: "/vote/$voteID",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/vote/$voteID.lazy").then(d => d.Route));

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/issues": {
      id: "/issues";
      path: "/issues";
      fullPath: "/issues";
      preLoaderRoute: typeof IssuesLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/vote/$voteID": {
      id: "/vote/$voteID";
      path: "/vote/$voteID";
      fullPath: "/vote/$voteID";
      preLoaderRoute: typeof VoteVoteIDLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/vote/all": {
      id: "/vote/all";
      path: "/vote/all";
      fullPath: "/vote/all";
      preLoaderRoute: typeof VoteAllLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/vote/": {
      id: "/vote/";
      path: "/vote";
      fullPath: "/vote";
      preLoaderRoute: typeof VoteIndexLazyImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexLazyRoute;
  "/issues": typeof IssuesLazyRoute;
  "/vote/$voteID": typeof VoteVoteIDLazyRoute;
  "/vote/all": typeof VoteAllLazyRoute;
  "/vote": typeof VoteIndexLazyRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexLazyRoute;
  "/issues": typeof IssuesLazyRoute;
  "/vote/$voteID": typeof VoteVoteIDLazyRoute;
  "/vote/all": typeof VoteAllLazyRoute;
  "/vote": typeof VoteIndexLazyRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexLazyRoute;
  "/issues": typeof IssuesLazyRoute;
  "/vote/$voteID": typeof VoteVoteIDLazyRoute;
  "/vote/all": typeof VoteAllLazyRoute;
  "/vote/": typeof VoteIndexLazyRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/" | "/issues" | "/vote/$voteID" | "/vote/all" | "/vote";
  fileRoutesByTo: FileRoutesByTo;
  to: "/" | "/issues" | "/vote/$voteID" | "/vote/all" | "/vote";
  id: "__root__" | "/" | "/issues" | "/vote/$voteID" | "/vote/all" | "/vote/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute;
  IssuesLazyRoute: typeof IssuesLazyRoute;
  VoteVoteIDLazyRoute: typeof VoteVoteIDLazyRoute;
  VoteAllLazyRoute: typeof VoteAllLazyRoute;
  VoteIndexLazyRoute: typeof VoteIndexLazyRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  IssuesLazyRoute: IssuesLazyRoute,
  VoteVoteIDLazyRoute: VoteVoteIDLazyRoute,
  VoteAllLazyRoute: VoteAllLazyRoute,
  VoteIndexLazyRoute: VoteIndexLazyRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/issues",
        "/vote/$voteID",
        "/vote/all",
        "/vote/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/issues": {
      "filePath": "issues.lazy.tsx"
    },
    "/vote/$voteID": {
      "filePath": "vote/$voteID.lazy.tsx"
    },
    "/vote/all": {
      "filePath": "vote/all.lazy.tsx"
    },
    "/vote/": {
      "filePath": "vote/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
