/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as VoteIndexImport } from './routes/vote/index'
import { Route as MeetingsIndexImport } from './routes/meetings/index'
import { Route as IssuesIndexImport } from './routes/issues/index'
import { Route as ActivitiesIndexImport } from './routes/activities/index'
import { Route as VoteAllImport } from './routes/vote/all'
import { Route as VoteVoteIDImport } from './routes/vote/$voteID'
import { Route as MeetingsMeedingIDImport } from './routes/meetings/$meedingID'
import { Route as IssuesMyIssuesImport } from './routes/issues/my-issues'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const VoteIndexRoute = VoteIndexImport.update({
  id: '/vote/',
  path: '/vote/',
  getParentRoute: () => rootRoute,
} as any)

const MeetingsIndexRoute = MeetingsIndexImport.update({
  id: '/meetings/',
  path: '/meetings/',
  getParentRoute: () => rootRoute,
} as any)

const IssuesIndexRoute = IssuesIndexImport.update({
  id: '/issues/',
  path: '/issues/',
  getParentRoute: () => rootRoute,
} as any)

const ActivitiesIndexRoute = ActivitiesIndexImport.update({
  id: '/activities/',
  path: '/activities/',
  getParentRoute: () => rootRoute,
} as any)

const VoteAllRoute = VoteAllImport.update({
  id: '/vote/all',
  path: '/vote/all',
  getParentRoute: () => rootRoute,
} as any)

const VoteVoteIDRoute = VoteVoteIDImport.update({
  id: '/vote/$voteID',
  path: '/vote/$voteID',
  getParentRoute: () => rootRoute,
} as any)

const MeetingsMeedingIDRoute = MeetingsMeedingIDImport.update({
  id: '/meetings/$meedingID',
  path: '/meetings/$meedingID',
  getParentRoute: () => rootRoute,
} as any)

const IssuesMyIssuesRoute = IssuesMyIssuesImport.update({
  id: '/issues/my-issues',
  path: '/issues/my-issues',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/issues/my-issues': {
      id: '/issues/my-issues'
      path: '/issues/my-issues'
      fullPath: '/issues/my-issues'
      preLoaderRoute: typeof IssuesMyIssuesImport
      parentRoute: typeof rootRoute
    }
    '/meetings/$meedingID': {
      id: '/meetings/$meedingID'
      path: '/meetings/$meedingID'
      fullPath: '/meetings/$meedingID'
      preLoaderRoute: typeof MeetingsMeedingIDImport
      parentRoute: typeof rootRoute
    }
    '/vote/$voteID': {
      id: '/vote/$voteID'
      path: '/vote/$voteID'
      fullPath: '/vote/$voteID'
      preLoaderRoute: typeof VoteVoteIDImport
      parentRoute: typeof rootRoute
    }
    '/vote/all': {
      id: '/vote/all'
      path: '/vote/all'
      fullPath: '/vote/all'
      preLoaderRoute: typeof VoteAllImport
      parentRoute: typeof rootRoute
    }
    '/activities/': {
      id: '/activities/'
      path: '/activities'
      fullPath: '/activities'
      preLoaderRoute: typeof ActivitiesIndexImport
      parentRoute: typeof rootRoute
    }
    '/issues/': {
      id: '/issues/'
      path: '/issues'
      fullPath: '/issues'
      preLoaderRoute: typeof IssuesIndexImport
      parentRoute: typeof rootRoute
    }
    '/meetings/': {
      id: '/meetings/'
      path: '/meetings'
      fullPath: '/meetings'
      preLoaderRoute: typeof MeetingsIndexImport
      parentRoute: typeof rootRoute
    }
    '/vote/': {
      id: '/vote/'
      path: '/vote'
      fullPath: '/vote'
      preLoaderRoute: typeof VoteIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/issues/my-issues': typeof IssuesMyIssuesRoute
  '/meetings/$meedingID': typeof MeetingsMeedingIDRoute
  '/vote/$voteID': typeof VoteVoteIDRoute
  '/vote/all': typeof VoteAllRoute
  '/activities': typeof ActivitiesIndexRoute
  '/issues': typeof IssuesIndexRoute
  '/meetings': typeof MeetingsIndexRoute
  '/vote': typeof VoteIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/issues/my-issues': typeof IssuesMyIssuesRoute
  '/meetings/$meedingID': typeof MeetingsMeedingIDRoute
  '/vote/$voteID': typeof VoteVoteIDRoute
  '/vote/all': typeof VoteAllRoute
  '/activities': typeof ActivitiesIndexRoute
  '/issues': typeof IssuesIndexRoute
  '/meetings': typeof MeetingsIndexRoute
  '/vote': typeof VoteIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/issues/my-issues': typeof IssuesMyIssuesRoute
  '/meetings/$meedingID': typeof MeetingsMeedingIDRoute
  '/vote/$voteID': typeof VoteVoteIDRoute
  '/vote/all': typeof VoteAllRoute
  '/activities/': typeof ActivitiesIndexRoute
  '/issues/': typeof IssuesIndexRoute
  '/meetings/': typeof MeetingsIndexRoute
  '/vote/': typeof VoteIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/issues/my-issues'
    | '/meetings/$meedingID'
    | '/vote/$voteID'
    | '/vote/all'
    | '/activities'
    | '/issues'
    | '/meetings'
    | '/vote'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/issues/my-issues'
    | '/meetings/$meedingID'
    | '/vote/$voteID'
    | '/vote/all'
    | '/activities'
    | '/issues'
    | '/meetings'
    | '/vote'
  id:
    | '__root__'
    | '/'
    | '/issues/my-issues'
    | '/meetings/$meedingID'
    | '/vote/$voteID'
    | '/vote/all'
    | '/activities/'
    | '/issues/'
    | '/meetings/'
    | '/vote/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  IssuesMyIssuesRoute: typeof IssuesMyIssuesRoute
  MeetingsMeedingIDRoute: typeof MeetingsMeedingIDRoute
  VoteVoteIDRoute: typeof VoteVoteIDRoute
  VoteAllRoute: typeof VoteAllRoute
  ActivitiesIndexRoute: typeof ActivitiesIndexRoute
  IssuesIndexRoute: typeof IssuesIndexRoute
  MeetingsIndexRoute: typeof MeetingsIndexRoute
  VoteIndexRoute: typeof VoteIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  IssuesMyIssuesRoute: IssuesMyIssuesRoute,
  MeetingsMeedingIDRoute: MeetingsMeedingIDRoute,
  VoteVoteIDRoute: VoteVoteIDRoute,
  VoteAllRoute: VoteAllRoute,
  ActivitiesIndexRoute: ActivitiesIndexRoute,
  IssuesIndexRoute: IssuesIndexRoute,
  MeetingsIndexRoute: MeetingsIndexRoute,
  VoteIndexRoute: VoteIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/issues/my-issues",
        "/meetings/$meedingID",
        "/vote/$voteID",
        "/vote/all",
        "/activities/",
        "/issues/",
        "/meetings/",
        "/vote/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/issues/my-issues": {
      "filePath": "issues/my-issues.tsx"
    },
    "/meetings/$meedingID": {
      "filePath": "meetings/$meedingID.tsx"
    },
    "/vote/$voteID": {
      "filePath": "vote/$voteID.tsx"
    },
    "/vote/all": {
      "filePath": "vote/all.tsx"
    },
    "/activities/": {
      "filePath": "activities/index.tsx"
    },
    "/issues/": {
      "filePath": "issues/index.tsx"
    },
    "/meetings/": {
      "filePath": "meetings/index.tsx"
    },
    "/vote/": {
      "filePath": "vote/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
